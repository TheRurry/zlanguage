
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\002\000\002\032\003\000\002\032\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\010\000\002\004\006\000\002\005\005\000\002\005\007" +
    "\000\002\010\006\000\002\010\005\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\005\000\002" +
    "\012\007\000\002\013\003\000\002\013\005\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\004" +
    "\000\002\007\003\000\002\007\002\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\005\000\002\015\004\000\002\015" +
    "\005\000\002\015\006\000\002\015\003\000\002\015\005" +
    "\000\002\015\004\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\004\000\002\006\003\000\002" +
    "\006\005\000\002\006\006\000\002\006\010\000\002\016" +
    "\004\000\002\026\004\000\002\026\002\000\002\025\004" +
    "\000\002\025\003\000\002\017\004\000\002\017\006\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\017\005\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\027\004\000\002\027\003\000\002\027\004" +
    "\000\002\027\005\000\002\031\011\000\002\031\013\000" +
    "\002\031\003\000\002\030\011\000\002\030\013\000\002" +
    "\030\003\000\002\020\015\000\002\020\013\000\002\020" +
    "\012\000\002\020\014\000\002\020\014\000\002\020\012" +
    "\000\002\020\011\000\002\020\013\000\002\021\010\000" +
    "\002\021\006\000\002\022\010\000\002\023\006\000\002" +
    "\024\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\014\004\ufffb\014\ufffb\015\ufffb\016\ufffb\070" +
    "\ufffb\001\002\000\004\002\335\001\002\000\014\004\010" +
    "\014\015\015\007\016\013\070\006\001\002\000\004\045" +
    "\272\001\002\000\022\005\033\006\035\007\027\010\031" +
    "\011\034\012\026\013\030\070\025\001\002\000\004\061" +
    "\326\001\002\000\014\002\ufffb\014\ufffb\015\ufffb\016\ufffb" +
    "\070\ufffb\001\002\000\016\002\ufffc\004\ufffc\014\ufffc\015" +
    "\ufffc\016\ufffc\070\ufffc\001\002\000\004\070\056\001\002" +
    "\000\016\002\uffff\004\uffff\014\uffff\015\uffff\016\uffff\070" +
    "\uffff\001\002\000\004\070\020\001\002\000\016\002\ufffd" +
    "\004\ufffd\014\ufffd\015\ufffd\016\ufffd\070\ufffd\001\002\000" +
    "\016\002\ufffe\004\ufffe\014\ufffe\015\ufffe\016\ufffe\070\ufffe" +
    "\001\002\000\004\061\021\001\002\000\004\070\023\001" +
    "\002\000\006\060\051\067\050\001\002\000\004\045\024" +
    "\001\002\000\022\005\033\006\035\007\027\010\031\011" +
    "\034\012\026\013\030\070\025\001\002\000\020\051\ufff3" +
    "\055\ufff3\057\ufff3\060\ufff3\065\ufff3\067\ufff3\070\ufff3\001" +
    "\002\000\004\047\043\001\002\000\020\051\ufff6\055\ufff6" +
    "\057\ufff6\060\ufff6\065\ufff6\067\ufff6\070\ufff6\001\002\000" +
    "\004\047\036\001\002\000\020\051\ufff5\055\ufff5\057\ufff5" +
    "\060\ufff5\065\ufff5\067\ufff5\070\ufff5\001\002\000\010\057" +
    "\ufff0\060\ufff0\067\ufff0\001\002\000\020\051\ufff8\055\ufff8" +
    "\057\ufff8\060\ufff8\065\ufff8\067\ufff8\070\ufff8\001\002\000" +
    "\020\051\ufff4\055\ufff4\057\ufff4\060\ufff4\065\ufff4\067\ufff4" +
    "\070\ufff4\001\002\000\020\051\ufff7\055\ufff7\057\ufff7\060" +
    "\ufff7\065\ufff7\067\ufff7\070\ufff7\001\002\000\024\005\033" +
    "\006\035\007\027\010\031\011\034\012\026\013\030\032" +
    "\040\070\025\001\002\000\004\051\042\001\002\000\006" +
    "\051\ufff9\067\ufff9\001\002\000\006\051\ufffa\067\ufffa\001" +
    "\002\000\020\051\ufff1\055\ufff1\057\ufff1\060\ufff1\065\ufff1" +
    "\067\ufff1\070\ufff1\001\002\000\024\005\033\006\035\007" +
    "\027\010\031\011\034\012\026\013\030\032\040\070\025" +
    "\001\002\000\004\067\045\001\002\000\024\005\033\006" +
    "\035\007\027\010\031\011\034\012\026\013\030\032\040" +
    "\070\025\001\002\000\004\051\047\001\002\000\020\051" +
    "\ufff2\055\ufff2\057\ufff2\060\ufff2\065\ufff2\067\ufff2\070\ufff2" +
    "\001\002\000\004\070\053\001\002\000\004\065\052\001" +
    "\002\000\040\002\uff9c\004\uff9c\014\uff9c\015\uff9c\016\uff9c" +
    "\017\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\026\uff9c\027" +
    "\uff9c\030\uff9c\060\uff9c\070\uff9c\001\002\000\004\045\054" +
    "\001\002\000\022\005\033\006\035\007\027\010\031\011" +
    "\034\012\026\013\030\070\025\001\002\000\010\057\uffef" +
    "\060\uffef\067\uffef\001\002\000\004\056\057\001\002\000" +
    "\006\057\061\070\023\001\002\000\006\057\310\067\050" +
    "\001\002\000\004\061\062\001\002\000\026\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\023\uffbc\026\uffbc\027\uffbc\030\uffbc" +
    "\060\065\070\uffbc\001\002\000\004\060\303\001\002\000" +
    "\024\014\015\015\007\016\013\017\100\023\075\026\076" +
    "\027\072\030\105\070\074\001\002\000\006\045\066\065" +
    "\067\001\002\000\022\005\033\006\035\007\027\010\031" +
    "\011\034\012\026\013\030\070\025\001\002\000\040\002" +
    "\uffa0\004\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\021\uffa0" +
    "\022\uffa0\023\uffa0\024\uffa0\026\uffa0\027\uffa0\030\uffa0\060" +
    "\uffa0\070\uffa0\001\002\000\004\065\071\001\002\000\040" +
    "\002\uff9f\004\uff9f\014\uff9f\015\uff9f\016\uff9f\017\uff9f\021" +
    "\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\060\uff9f\070\uff9f\001\002\000\004\070\301\001\002\000" +
    "\032\014\uffaa\015\uffaa\016\uffaa\017\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\026\uffaa\027\uffaa\030\uffaa\060\uffaa\070\uffaa\001" +
    "\002\000\014\045\272\055\uffc2\056\113\062\uffc2\064\uffc2" +
    "\001\002\000\026\014\015\015\007\016\013\017\250\023" +
    "\075\025\252\026\076\027\072\030\105\070\111\001\002" +
    "\000\036\033\121\040\124\056\134\061\117\062\114\065" +
    "\uffd3\066\123\070\111\071\116\072\115\073\126\074\131" +
    "\075\132\076\125\001\002\000\004\065\244\001\002\000" +
    "\004\056\233\001\002\000\034\014\uffb3\015\uffb3\016\uffb3" +
    "\017\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\060\uffb3\070\uffb3\001\002\000\010\055\230" +
    "\062\170\064\227\001\002\000\032\014\uffba\015\uffba\016" +
    "\uffba\017\uffba\021\uffba\022\uffba\023\uffba\026\uffba\027\uffba" +
    "\030\uffba\060\uffba\070\uffba\001\002\000\024\014\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\023\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\070\uffbd\001\002\000\034\033\121\040\124\056\134\061" +
    "\117\062\114\066\123\070\111\071\116\072\115\073\126" +
    "\074\131\075\132\076\125\001\002\000\034\014\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\021\uffb1\022\uffb1\023\uffb1\024\uffb1" +
    "\026\uffb1\027\uffb1\030\uffb1\060\uffb1\070\uffb1\001\002\000" +
    "\034\014\uffb2\015\uffb2\016\uffb2\017\uffb2\021\uffb2\022\uffb2" +
    "\023\uffb2\024\uffb2\026\uffb2\027\uffb2\030\uffb2\060\uffb2\070" +
    "\uffb2\001\002\000\026\014\015\015\007\016\013\017\100" +
    "\023\075\026\076\027\072\030\105\060\uffbe\070\111\001" +
    "\002\000\070\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2" +
    "\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047" +
    "\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\056\113\057\uffc2\060\uffc2\062\uffc2\063\uffc2\064\uffc2\065" +
    "\uffc2\066\uffc2\067\uffc2\001\002\000\032\014\uffbb\015\uffbb" +
    "\016\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\060\uffbb\070\uffbb\001\002\000\036\033\121" +
    "\040\124\056\134\057\133\061\117\062\114\066\123\070" +
    "\111\071\116\072\115\073\126\074\131\075\132\076\125" +
    "\001\002\000\036\033\121\040\124\056\134\061\117\062" +
    "\114\063\222\066\123\070\111\071\116\072\115\073\126" +
    "\074\131\075\132\076\125\001\002\000\062\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8" +
    "\044\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\053\uffd8\054\uffd8\057\uffd8\060\uffd8\063\uffd8\064\uffd8" +
    "\065\uffd8\066\uffd8\067\uffd8\001\002\000\062\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf\051\uffcf\052" +
    "\uffcf\053\uffcf\054\uffcf\057\uffcf\060\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\067\uffcf\001\002\000\036\033\121\040" +
    "\124\056\134\060\211\061\117\062\114\066\123\070\111" +
    "\071\116\072\115\073\126\074\131\075\132\076\125\001" +
    "\002\000\062\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\057\uffd1" +
    "\060\uffd1\063\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\001" +
    "\002\000\034\033\121\040\124\056\134\061\117\062\114" +
    "\066\123\070\111\071\116\072\115\073\126\074\131\075" +
    "\132\076\125\001\002\000\062\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9" +
    "\054\uffc9\057\uffc9\060\uffc9\063\uffc9\064\uffc9\065\uffc9\066" +
    "\uffc9\067\uffc9\001\002\000\034\033\121\040\124\056\134" +
    "\061\117\062\114\066\123\070\111\071\116\072\115\073" +
    "\126\074\131\075\132\076\125\001\002\000\012\040\124" +
    "\072\115\073\126\074\131\001\002\000\062\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\052" +
    "\uffce\053\uffce\054\uffce\057\uffce\060\uffce\063\uffce\064\uffce" +
    "\065\uffce\066\uffce\067\uffce\001\002\000\062\034\uffd7\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\057\uffd7\060\uffd7\063\uffd7\064\uffd7" +
    "\065\uffd7\066\uffd7\067\uffd7\001\002\000\054\034\141\035" +
    "\143\036\156\037\154\040\150\041\152\042\153\043\162" +
    "\044\145\046\151\047\160\050\161\051\146\052\144\053" +
    "\157\054\142\057\uffda\063\uffda\064\155\065\uffda\067\uffda" +
    "\001\002\000\064\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\057" +
    "\uffd2\060\uffd2\062\170\063\uffd2\064\171\065\uffd2\066\uffd2" +
    "\067\uffd2\001\002\000\062\034\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\057\uffd6\060\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6" +
    "\067\uffd6\001\002\000\062\034\uffd0\035\uffd0\036\uffd0\037" +
    "\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0" +
    "\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\057\uffd0\060\uffd0\063\uffd0\064\uffd0\065\uffd0\066\uffd0" +
    "\067\uffd0\001\002\000\062\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\046\uffed\047\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\057\uffed\060\uffed\063\uffed\064\uffed\065\uffed\066\uffed" +
    "\067\uffed\001\002\000\036\033\121\040\124\056\134\057" +
    "\uffd3\061\117\062\114\066\123\070\111\071\116\072\115" +
    "\073\126\074\131\075\132\076\125\001\002\000\006\057" +
    "\137\067\136\001\002\000\034\033\121\040\124\056\134" +
    "\061\117\062\114\066\123\070\111\071\116\072\115\073" +
    "\126\074\131\075\132\076\125\001\002\000\062\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\046\uffee\047\uffee\050\uffee\051\uffee" +
    "\052\uffee\053\uffee\054\uffee\057\uffee\060\uffee\063\uffee\064" +
    "\uffee\065\uffee\066\uffee\067\uffee\001\002\000\054\034\141" +
    "\035\143\036\156\037\154\040\150\041\152\042\153\043" +
    "\162\044\145\046\151\047\160\050\161\051\146\052\144" +
    "\053\157\054\142\057\uffd9\063\uffd9\064\155\065\uffd9\067" +
    "\uffd9\001\002\000\034\033\uffec\040\uffec\056\uffec\061\uffec" +
    "\062\uffec\066\uffec\070\uffec\071\uffec\072\uffec\073\uffec\074" +
    "\uffec\075\uffec\076\uffec\001\002\000\034\033\uffdf\040\uffdf" +
    "\056\uffdf\061\uffdf\062\uffdf\066\uffdf\070\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\074\uffdf\075\uffdf\076\uffdf\001\002\000\034" +
    "\033\uffeb\040\uffeb\056\uffeb\061\uffeb\062\uffeb\066\uffeb\070" +
    "\uffeb\071\uffeb\072\uffeb\073\uffeb\074\uffeb\075\uffeb\076\uffeb" +
    "\001\002\000\034\033\uffe1\040\uffe1\056\uffe1\061\uffe1\062" +
    "\uffe1\066\uffe1\070\uffe1\071\uffe1\072\uffe1\073\uffe1\074\uffe1" +
    "\075\uffe1\076\uffe1\001\002\000\034\033\uffde\040\uffde\056" +
    "\uffde\061\uffde\062\uffde\066\uffde\070\uffde\071\uffde\072\uffde" +
    "\073\uffde\074\uffde\075\uffde\076\uffde\001\002\000\034\033" +
    "\uffe2\040\uffe2\056\uffe2\061\uffe2\062\uffe2\066\uffe2\070\uffe2" +
    "\071\uffe2\072\uffe2\073\uffe2\074\uffe2\075\uffe2\076\uffe2\001" +
    "\002\000\034\033\121\040\124\056\134\061\117\062\114" +
    "\066\123\070\111\071\116\072\115\073\126\074\131\075" +
    "\132\076\125\001\002\000\034\033\uffe8\040\uffe8\056\uffe8" +
    "\061\uffe8\062\uffe8\066\uffe8\070\uffe8\071\uffe8\072\uffe8\073" +
    "\uffe8\074\uffe8\075\uffe8\076\uffe8\001\002\000\034\033\uffdd" +
    "\040\uffdd\056\uffdd\061\uffdd\062\uffdd\066\uffdd\070\uffdd\071" +
    "\uffdd\072\uffdd\073\uffdd\074\uffdd\075\uffdd\076\uffdd\001\002" +
    "\000\034\033\uffe7\040\uffe7\056\uffe7\061\uffe7\062\uffe7\066" +
    "\uffe7\070\uffe7\071\uffe7\072\uffe7\073\uffe7\074\uffe7\075\uffe7" +
    "\076\uffe7\001\002\000\034\033\uffe6\040\uffe6\056\uffe6\061" +
    "\uffe6\062\uffe6\066\uffe6\070\uffe6\071\uffe6\072\uffe6\073\uffe6" +
    "\074\uffe6\075\uffe6\076\uffe6\001\002\000\034\033\uffe9\040" +
    "\uffe9\056\uffe9\061\uffe9\062\uffe9\066\uffe9\070\uffe9\071\uffe9" +
    "\072\uffe9\073\uffe9\074\uffe9\075\uffe9\076\uffe9\001\002\000" +
    "\004\031\163\001\002\000\034\033\uffea\040\uffea\056\uffea" +
    "\061\uffea\062\uffea\066\uffea\070\uffea\071\uffea\072\uffea\073" +
    "\uffea\074\uffea\075\uffea\076\uffea\001\002\000\034\033\uffe0" +
    "\040\uffe0\056\uffe0\061\uffe0\062\uffe0\066\uffe0\070\uffe0\071" +
    "\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0\076\uffe0\001\002" +
    "\000\034\033\uffe4\040\uffe4\056\uffe4\061\uffe4\062\uffe4\066" +
    "\uffe4\070\uffe4\071\uffe4\072\uffe4\073\uffe4\074\uffe4\075\uffe4" +
    "\076\uffe4\001\002\000\034\033\uffe3\040\uffe3\056\uffe3\061" +
    "\uffe3\062\uffe3\066\uffe3\070\uffe3\071\uffe3\072\uffe3\073\uffe3" +
    "\074\uffe3\075\uffe3\076\uffe3\001\002\000\034\033\uffe5\040" +
    "\uffe5\056\uffe5\061\uffe5\062\uffe5\066\uffe5\070\uffe5\071\uffe5" +
    "\072\uffe5\073\uffe5\074\uffe5\075\uffe5\076\uffe5\001\002\000" +
    "\062\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4\050" +
    "\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\057\uffc4\060\uffc4" +
    "\063\uffc4\064\uffc4\065\uffc4\066\uffc4\067\uffc4\001\002\000" +
    "\062\034\141\035\143\036\156\037\154\040\150\041\152" +
    "\042\153\043\162\044\145\045\uffcd\046\151\047\160\050" +
    "\161\051\146\052\144\053\157\054\142\057\uffcd\060\uffcd" +
    "\063\uffcd\064\155\065\uffcd\066\uffcd\067\uffcd\001\002\000" +
    "\004\057\167\001\002\000\052\034\141\035\143\036\156" +
    "\037\154\040\150\041\152\042\153\043\162\044\145\046" +
    "\151\047\160\050\161\051\146\052\144\053\157\054\142" +
    "\057\uffd4\063\uffd4\064\155\065\uffd4\001\002\000\062\034" +
    "\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\053\uffcb\054\uffcb\057\uffcb\060\uffcb\063\uffcb" +
    "\064\uffcb\065\uffcb\066\uffcb\067\uffcb\001\002\000\036\033" +
    "\121\040\124\045\uffd3\056\134\061\117\062\114\066\123" +
    "\070\111\071\116\072\115\073\126\074\131\075\132\076" +
    "\125\001\002\000\006\031\173\070\172\001\002\000\066" +
    "\034\uffc1\035\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\057\uffc1\060" +
    "\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067\uffc1" +
    "\001\002\000\062\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040" +
    "\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\057" +
    "\uffc5\060\uffc5\063\uffc5\064\uffc5\065\uffc5\066\uffc5\067\uffc5" +
    "\001\002\000\004\045\177\001\002\000\050\034\141\035" +
    "\143\036\156\037\154\040\150\041\152\042\153\043\162" +
    "\044\145\045\uffd4\046\151\047\160\050\161\051\146\052" +
    "\144\053\157\054\142\063\176\064\155\001\002\000\066" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\057\uffc0\060" +
    "\uffc0\062\uffc0\063\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0" +
    "\001\002\000\036\033\121\040\124\056\134\061\117\062" +
    "\114\063\uffd3\066\123\070\111\071\116\072\115\073\126" +
    "\074\131\075\132\076\125\001\002\000\004\063\201\001" +
    "\002\000\066\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\057\uffbf\060\uffbf\062\uffbf\063\uffbf\064\uffbf\065\uffbf\066" +
    "\uffbf\067\uffbf\001\002\000\062\034\uffd5\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\057\uffd5\060\uffd5\063\uffd5\064\uffd5\065\uffd5\066" +
    "\uffd5\067\uffd5\001\002\000\046\034\141\035\143\036\156" +
    "\037\154\040\150\041\152\042\153\043\162\044\145\046" +
    "\151\047\160\050\161\051\146\052\144\053\157\054\142" +
    "\064\155\066\204\001\002\000\004\070\205\001\002\000" +
    "\004\056\113\001\002\000\062\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\045" +
    "\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052\uffca\053\uffca" +
    "\054\uffca\057\uffca\060\uffca\063\uffca\064\uffca\065\uffca\066" +
    "\uffca\067\uffca\001\002\000\062\034\uffcc\035\uffcc\036\uffcc" +
    "\037\154\040\150\041\152\042\153\043\162\044\145\045" +
    "\uffcc\046\151\047\160\050\161\051\146\052\144\053\157" +
    "\054\142\057\uffcc\060\uffcc\063\uffcc\064\155\065\uffcc\066" +
    "\uffcc\067\uffcc\001\002\000\046\034\141\035\143\036\156" +
    "\037\154\040\150\041\152\042\153\043\162\044\145\045" +
    "\220\046\151\047\160\050\161\051\146\052\144\053\157" +
    "\054\142\064\155\001\002\000\062\034\uffc3\035\uffc3\036" +
    "\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\057\uffc3\060\uffc3\063\uffc3\064\uffc3\065\uffc3" +
    "\066\uffc3\067\uffc3\001\002\000\006\060\214\067\213\001" +
    "\002\000\034\033\121\040\124\056\134\061\117\062\114" +
    "\066\123\070\111\071\116\072\115\073\126\074\131\075" +
    "\132\076\125\001\002\000\062\034\uffc6\035\uffc6\036\uffc6" +
    "\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6" +
    "\054\uffc6\057\uffc6\060\uffc6\063\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\067\uffc6\001\002\000\046\034\141\035\143\036\156" +
    "\037\154\040\150\041\152\042\153\043\162\044\145\045" +
    "\216\046\151\047\160\050\161\051\146\052\144\053\157" +
    "\054\142\064\155\001\002\000\034\033\121\040\124\056" +
    "\134\061\117\062\114\066\123\070\111\071\116\072\115" +
    "\073\126\074\131\075\132\076\125\001\002\000\050\034" +
    "\141\035\143\036\156\037\154\040\150\041\152\042\153" +
    "\043\162\044\145\046\151\047\160\050\161\051\146\052" +
    "\144\053\157\054\142\060\uffdb\064\155\067\uffdb\001\002" +
    "\000\034\033\121\040\124\056\134\061\117\062\114\066" +
    "\123\070\111\071\116\072\115\073\126\074\131\075\132" +
    "\076\125\001\002\000\050\034\141\035\143\036\156\037" +
    "\154\040\150\041\152\042\153\043\162\044\145\046\151" +
    "\047\160\050\161\051\146\052\144\053\157\054\142\060" +
    "\uffdc\064\155\067\uffdc\001\002\000\062\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\057\uffc7\060\uffc7\063\uffc7\064\uffc7\065" +
    "\uffc7\066\uffc7\067\uffc7\001\002\000\006\063\224\067\136" +
    "\001\002\000\062\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\057" +
    "\uffc8\060\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8" +
    "\001\002\000\046\034\141\035\143\036\156\037\154\040" +
    "\150\041\152\042\153\043\162\044\145\046\151\047\160" +
    "\050\161\051\146\052\144\053\157\054\142\064\155\065" +
    "\226\001\002\000\034\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\060\uffb6\070\uffb6\001\002\000\004\070\172\001\002" +
    "\000\034\033\121\040\124\056\134\061\117\062\114\066" +
    "\123\070\111\071\116\072\115\073\126\074\131\075\132" +
    "\076\125\001\002\000\006\065\232\067\136\001\002\000" +
    "\034\014\uffb8\015\uffb8\016\uffb8\017\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030\uffb8\060\uffb8\070" +
    "\uffb8\001\002\000\034\033\121\040\124\056\134\061\117" +
    "\062\114\066\123\070\111\071\116\072\115\073\126\074" +
    "\131\075\132\076\125\001\002\000\046\034\141\035\143" +
    "\036\156\037\154\040\150\041\152\042\153\043\162\044" +
    "\145\046\151\047\160\050\161\051\146\052\144\053\157" +
    "\054\142\057\235\064\155\001\002\000\004\020\236\001" +
    "\002\000\024\014\015\015\007\016\013\017\100\023\075" +
    "\026\076\027\072\030\105\070\111\001\002\000\030\014" +
    "\015\015\007\016\013\017\100\021\240\022\241\023\075" +
    "\026\076\027\072\030\105\070\111\001\002\000\024\014" +
    "\015\015\007\016\013\017\100\023\075\026\076\027\072" +
    "\030\105\070\111\001\002\000\032\014\uffac\015\uffac\016" +
    "\uffac\017\uffac\021\uffac\022\uffac\023\uffac\026\uffac\027\uffac" +
    "\030\uffac\060\uffac\070\uffac\001\002\000\026\014\015\015" +
    "\007\016\013\017\100\022\243\023\075\026\076\027\072" +
    "\030\105\070\111\001\002\000\032\014\uffab\015\uffab\016" +
    "\uffab\017\uffab\021\uffab\022\uffab\023\uffab\026\uffab\027\uffab" +
    "\030\uffab\060\uffab\070\uffab\001\002\000\034\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\060\uffb9\070\uffb9\001\002\000" +
    "\004\065\246\001\002\000\034\014\uffb4\015\uffb4\016\uffb4" +
    "\017\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\027" +
    "\uffb4\030\uffb4\060\uffb4\070\uffb4\001\002\000\032\014\uffa7" +
    "\015\uffa7\016\uffa7\017\uffa7\021\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\026\uffa7\027\uffa7\030\uffa7\070\uffa7\001\002\000\004" +
    "\056\261\001\002\000\026\014\015\015\007\016\013\017" +
    "\250\023\075\024\260\026\076\027\072\030\105\070\111" +
    "\001\002\000\006\065\254\072\255\001\002\000\032\014" +
    "\uffaf\015\uffaf\016\uffaf\017\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\024\uffaf\026\uffaf\027\uffaf\030\uffaf\070\uffaf\001\002\000" +
    "\032\014\uffae\015\uffae\016\uffae\017\uffae\021\uffae\022\uffae" +
    "\023\uffae\024\uffae\026\uffae\027\uffae\030\uffae\070\uffae\001" +
    "\002\000\004\065\256\001\002\000\032\014\uffad\015\uffad" +
    "\016\uffad\017\uffad\021\uffad\022\uffad\023\uffad\024\uffad\026" +
    "\uffad\027\uffad\030\uffad\070\uffad\001\002\000\032\014\uffb0" +
    "\015\uffb0\016\uffb0\017\uffb0\021\uffb0\022\uffb0\023\uffb0\024" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\070\uffb0\001\002\000\034" +
    "\014\uffb5\015\uffb5\016\uffb5\017\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\026\uffb5\027\uffb5\030\uffb5\060\uffb5\070\uffb5" +
    "\001\002\000\034\033\121\040\124\056\134\061\117\062" +
    "\114\066\123\070\111\071\116\072\115\073\126\074\131" +
    "\075\132\076\125\001\002\000\046\034\141\035\143\036" +
    "\156\037\154\040\150\041\152\042\153\043\162\044\145" +
    "\046\151\047\160\050\161\051\146\052\144\053\157\054" +
    "\142\057\263\064\155\001\002\000\004\020\264\001\002" +
    "\000\026\014\015\015\007\016\013\017\250\023\075\025" +
    "\252\026\076\027\072\030\105\070\111\001\002\000\030" +
    "\014\015\015\007\016\013\017\250\021\266\022\267\023" +
    "\075\026\076\027\072\030\105\070\111\001\002\000\026" +
    "\014\015\015\007\016\013\017\250\023\075\025\252\026" +
    "\076\027\072\030\105\070\111\001\002\000\032\014\uffa9" +
    "\015\uffa9\016\uffa9\017\uffa9\021\uffa9\022\uffa9\023\uffa9\024" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\070\uffa9\001\002\000\026" +
    "\014\015\015\007\016\013\017\250\022\271\023\075\026" +
    "\076\027\072\030\105\070\111\001\002\000\032\014\uffa8" +
    "\015\uffa8\016\uffa8\017\uffa8\021\uffa8\022\uffa8\023\uffa8\024" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\070\uffa8\001\002\000\022" +
    "\005\033\006\035\007\027\010\031\011\034\012\026\013" +
    "\030\070\025\001\002\000\006\055\275\065\274\001\002" +
    "\000\030\002\uff9d\004\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\023\uff9d\026\uff9d\027\uff9d\030\uff9d\070\uff9d\001\002" +
    "\000\034\033\121\040\124\056\134\061\117\062\114\066" +
    "\123\070\111\071\116\072\115\073\126\074\131\075\132" +
    "\076\125\001\002\000\006\065\277\067\136\001\002\000" +
    "\030\002\uff9e\004\uff9e\014\uff9e\015\uff9e\016\uff9e\017\uff9e" +
    "\023\uff9e\026\uff9e\027\uff9e\030\uff9e\070\uff9e\001\002\000" +
    "\010\062\170\064\227\065\302\001\002\000\010\062\uffc2" +
    "\064\uffc2\065\uffc2\001\002\000\034\014\uffb7\015\uffb7\016" +
    "\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7" +
    "\027\uffb7\030\uffb7\060\uffb7\070\uffb7\001\002\000\006\045" +
    "\304\065\305\001\002\000\022\005\033\006\035\007\027" +
    "\010\031\011\034\012\026\013\030\070\025\001\002\000" +
    "\040\002\uffa4\004\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\027\uffa4\030" +
    "\uffa4\060\uffa4\070\uffa4\001\002\000\004\065\307\001\002" +
    "\000\040\002\uffa3\004\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\021\uffa3\022\uffa3\023\uffa3\024\uffa3\026\uffa3\027\uffa3" +
    "\030\uffa3\060\uffa3\070\uffa3\001\002\000\004\061\311\001" +
    "\002\000\026\014\uffbc\015\uffbc\016\uffbc\017\uffbc\023\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\060\313\070\uffbc\001\002\000" +
    "\004\060\320\001\002\000\006\045\314\065\315\001\002" +
    "\000\022\005\033\006\035\007\027\010\031\011\034\012" +
    "\026\013\030\070\025\001\002\000\040\002\uffa1\004\uffa1" +
    "\014\uffa1\015\uffa1\016\uffa1\017\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\026\uffa1\027\uffa1\030\uffa1\060\uffa1\070\uffa1" +
    "\001\002\000\004\065\317\001\002\000\040\002\uffa2\004" +
    "\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\021\uffa2\022\uffa2" +
    "\023\uffa2\024\uffa2\026\uffa2\027\uffa2\030\uffa2\060\uffa2\070" +
    "\uffa2\001\002\000\006\045\321\065\322\001\002\000\022" +
    "\005\033\006\035\007\027\010\031\011\034\012\026\013" +
    "\030\070\025\001\002\000\040\002\uffa5\004\uffa5\014\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\026\uffa5\027\uffa5\030\uffa5\060\uffa5\070\uffa5\001\002" +
    "\000\004\065\324\001\002\000\040\002\uffa6\004\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\021\uffa6\022\uffa6\023\uffa6" +
    "\024\uffa6\026\uffa6\027\uffa6\030\uffa6\060\uffa6\070\uffa6\001" +
    "\002\000\014\002\001\014\015\015\007\016\013\070\006" +
    "\001\002\000\024\014\uffbc\015\uffbc\016\uffbc\017\uffbc\023" +
    "\uffbc\026\uffbc\027\uffbc\030\uffbc\070\uffbc\001\002\000\004" +
    "\060\330\001\002\000\004\065\331\001\002\000\014\002" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\070\uff9a\001\002\000\004" +
    "\070\333\001\002\000\004\065\334\001\002\000\040\002" +
    "\uff9b\004\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\026\uff9b\027\uff9b\030\uff9b\060" +
    "\uff9b\070\uff9b\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\014\020\013\021\016\022\015\023\011\024\010" +
    "\001\001\000\002\001\001\000\004\004\331\001\001\000" +
    "\002\001\001\000\004\003\324\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\040\032\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\040\032\043\001\001\000\002\001\001\000" +
    "\006\004\040\032\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\062\026\063" +
    "\001\001\000\002\001\001\000\024\006\101\010\076\017" +
    "\072\020\105\021\103\022\106\023\100\025\107\031\102" +
    "\001\001\000\002\001\001\000\004\004\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\101\010\076\017\246\020\105\022\106\023\100" +
    "\027\250\030\252\001\001\000\014\006\127\007\244\010" +
    "\121\014\117\015\165\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\127\010\121\014\117" +
    "\015\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\006\101\010\076\017\072\020\105\022\106\023\100" +
    "\031\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\127\010\121\013\134\014\117\015\126\001\001" +
    "\000\014\006\127\010\121\013\222\014\117\015\126\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\127" +
    "\010\121\012\211\014\117\015\207\001\001\000\002\001" +
    "\001\000\012\006\127\010\121\014\117\015\206\001\001" +
    "\000\002\001\001\000\012\006\127\010\121\014\117\015" +
    "\202\001\001\000\004\014\201\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\127\007\164\010\121\014\117\015\165\001" +
    "\001\000\002\001\001\000\012\006\127\010\121\014\117" +
    "\015\137\001\001\000\002\001\001\000\004\011\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\127\010\121\014\117\015\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\146\001\001" +
    "\000\002\001\001\000\004\011\146\001\001\000\002\001" +
    "\001\000\014\006\127\007\173\010\121\014\117\015\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\146\001\001\000\002" +
    "\001\001\000\014\006\127\007\177\010\121\014\117\015" +
    "\165\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\146\001\001\000\004\010\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\146" +
    "\001\001\000\004\011\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\127\010\121\014\117\015\214" +
    "\001\001\000\002\001\001\000\004\011\146\001\001\000" +
    "\012\006\127\010\121\014\117\015\216\001\001\000\004" +
    "\011\146\001\001\000\012\006\127\010\121\014\117\015" +
    "\220\001\001\000\004\011\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\127" +
    "\010\121\013\230\014\117\015\126\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\127\010\121\014\117" +
    "\015\233\001\001\000\004\011\146\001\001\000\002\001" +
    "\001\000\022\006\101\010\076\017\072\020\105\022\106" +
    "\023\100\025\236\031\102\001\001\000\020\006\101\010" +
    "\076\017\072\020\105\022\106\023\100\031\111\001\001" +
    "\000\022\006\101\010\076\017\072\020\105\022\106\023" +
    "\100\025\241\031\102\001\001\000\002\001\001\000\020" +
    "\006\101\010\076\017\072\020\105\022\106\023\100\031" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\006\101\010\076\017\246\020\105\022\106" +
    "\023\100\030\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\127\010" +
    "\121\014\117\015\261\001\001\000\004\011\146\001\001" +
    "\000\002\001\001\000\022\006\101\010\076\017\246\020" +
    "\105\022\106\023\100\027\264\030\252\001\001\000\020" +
    "\006\101\010\076\017\246\020\105\022\106\023\100\030" +
    "\256\001\001\000\022\006\101\010\076\017\246\020\105" +
    "\022\106\023\100\027\267\030\252\001\001\000\002\001" +
    "\001\000\020\006\101\010\076\017\246\020\105\022\106" +
    "\023\100\030\256\001\001\000\002\001\001\000\004\004" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\127\010\121\013\275\014\117\015\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\311\026\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\322\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\013\021\016\022\015\023\011\001\001\000\006\016\326" +
    "\026\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


        public boolean syntaxErrors = false;

        private Lexer lexer;

        public Parser(Lexer lex) {
                super(lex);
                lexer = lex;
        }

        public void syntax_error(Symbol current_token) {
                report_error(
                        "Syntax error at line " + (current_token.left+1) + ", column "
                        + current_token.right + " ", null
                );
                syntaxErrors = true;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // grammar ::= globals main globals 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("grammar",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= grammar EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // globals ::= globals fdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globals",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // globals ::= globals assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globals",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // globals ::= globals tdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globals",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // globals ::= globals alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globals",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // globals ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("globals",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // seq_type ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // seq_type ::= TOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // type ::= TCHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= TBOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= TINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= TRAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= TFLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= DICT LESSTHN seq_type COMMA seq_type MORETHN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // type ::= SEQ LESSTHN seq_type MORETHN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // formal_parameter_list ::= IDENT COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // formal_parameter_list ::= formal_parameter_list COMMA IDENT COL type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("formal_parameter_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_call ::= IDENT LPAR seq_vals RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_call ::= IDENT LPAR RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // operator ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operator ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operator ::= IMPLY 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operator ::= ADD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // operator ::= SUB 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operator ::= MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // operator ::= DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // operator ::= POWER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // operator ::= LESSTHN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // operator ::= LESSEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // operator ::= MORETHN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operator ::= MOREEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operator ::= EQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // operator ::= NOTEQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // operator ::= IN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // operator ::= DCOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operator",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // key_vals ::= expression COL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("key_vals",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // key_vals ::= key_vals COMMA expression COL expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("key_vals",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // seq_vals ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_vals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // seq_vals ::= seq_vals COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seq_vals",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // numeric ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // numeric ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // numeric ::= RAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // numeric ::= SUB numeric 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numeric",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nullable_expression ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nullable_expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nullable_expression ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nullable_expression",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= dot_ident 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= numeric 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= expression operator expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= LPAR nullable_expression RPAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= EVAL expression EVAL function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= function_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= LSQR seq_vals RSQR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= LSQR RSQR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= LCURL key_vals RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= dot_ident DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= expression DOT LEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= LCURL RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // dot_ident ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dot_ident",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // dot_ident ::= dot_ident DOT IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dot_ident",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // dot_ident ::= dot_ident LSQR expression RSQR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dot_ident",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // dot_ident ::= dot_ident LSQR nullable_expression COL nullable_expression RSQR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dot_ident",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // body ::= assignments statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignments ::= assignments assign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignments",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignments ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignments",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // statements ::= statements normal_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // statements ::= normal_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // statement ::= function_call SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // statement ::= dot_ident ASSIGN seq_vals SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // statement ::= READ dot_ident SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // statement ::= PRINT expression SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // statement ::= LOOP breakable_statements POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // statement ::= RETURN nullable_expression SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // statement ::= alias 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // statement ::= tdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement ::= fdef 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // breakable_statements ::= breakable_statements breakable_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakable_statements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // breakable_statements ::= breakable_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakable_statements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // breakable_statements ::= BREAK SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakable_statements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // breakable_statements ::= BREAK INT SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakable_statements",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // normal_statement ::= IF LPAR expression RPAR THEN statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normal_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // normal_statement ::= IF LPAR expression RPAR THEN statements ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normal_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // normal_statement ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("normal_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // breakable_statement ::= IF LPAR expression RPAR THEN breakable_statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakable_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // breakable_statement ::= IF LPAR expression RPAR THEN breakable_statements ELSE breakable_statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakable_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // breakable_statement ::= statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("breakable_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // fdef ::= FDEF IDENT LPAR formal_parameter_list RPAR LCURL body RCURL COL type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // fdef ::= FDEF IDENT LPAR formal_parameter_list RPAR LCURL body RCURL SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // fdef ::= FDEF IDENT LPAR RPAR LCURL body RCURL SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // fdef ::= FDEF IDENT LPAR RPAR LCURL body RCURL COL type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // fdef ::= FDEF IDENT LPAR formal_parameter_list RPAR LCURL RCURL COL type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // fdef ::= FDEF IDENT LPAR formal_parameter_list RPAR LCURL RCURL SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // fdef ::= FDEF IDENT LPAR RPAR LCURL RCURL SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // fdef ::= FDEF IDENT LPAR RPAR LCURL RCURL COL type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fdef",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // assign ::= IDENT COL type ASSIGN seq_vals SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // assign ::= IDENT COL type SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tdef ::= TDEF IDENT LCURL formal_parameter_list RCURL SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tdef",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // alias ::= ALIAS type IDENT SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // main ::= MAIN LCURL body RCURL SEMICOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
