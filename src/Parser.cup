import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:
        public boolean syntaxErrors = false;

        private Lexer lexer;

        public Parser(Lexer lex) {
                super(lex);
                lexer = lex;
        }

        public void syntax_error(Symbol current_token) {
                report_error(
                        "Syntax error at line " + (current_token.left+1) + ", column "
                        + current_token.right + " ", null
                );
                syntaxErrors = true;
        }
:};

terminal MAIN, TCHAR, TBOOL, TINT, TRAT, TFLOAT, DICT, SEQ, TDEF, ALIAS, FDEF, IF, THEN, ELSE, FI, LOOP, POOL, BREAK, RETURN, READ, PRINT, LEN, TOP, NOT, AND, OR, IMPLY, ADD, SUB, MULT, DIV, POWER, IN, COL, DCOL, LESSTHN, LESSEQ, MORETHN, MOREEQ, EQ, NOTEQ, ASSIGN, LPAR, RPAR, RCURL, LCURL, LSQR, RSQR, DOT, SEMICOL, EVAL, COMMA, IDENT, CHAR, INT, FLOAT, RAT, COLON, BOOL, STRING;

nonterminal grammar, globals, type, formal_parameter_list, function_call, operator, key_val, key_vals, seq_vals, numeric, expression, body, function_body, statement, fdef, assign, tdef, alias, main;

precedence left OR, AND, IMPLY, NOT;
precedence left EQ, NOTEQ, LESSTHN, LESSEQ, MORETHN, MOREEQ;
precedence left DCOL;
precedence left ADD, SUB;
precedence left DIV, MULT;
precedence left POWER;
precedence left LPAR, RPAR;

/*done*/
grammar ::= globals main globals;

/*done*/
globals ::= globals fdef
            |
            globals assign
            |
            globals tdef
            |
            globals alias
            |
            ;

/*done*/
type ::= TCHAR
         |
         TBOOL
         |
         TINT
         |
         TRAT
         |
         TFLOAT
         |
         IDENT
         |
         DICT LESSTHN INT COMMA type MORETHN
         |
         DICT LESSTHN INT COMMA TOP MORETHN
         |
         SEQ LESSTHN type MORETHN
         |
         SEQ LESSTHN TOP MORETHN;

/*done*/
formal_parameter_list ::= IDENT COLON type
                          |
                          formal_parameter_list COMMA IDENT COLON type;  

/*done*/
function_call ::= IDENT LPAR seq_vals RPAR SEMICOL
                  |
                  IDENT LPAR RPAR SEMICOL
 
/*done*/
operator ::=  AND
              |
              OR
              |
              IMPLY
              |
              ADD
              |
              SUB
              |
              MULT
              |
              DIV
              |
              POWER
              |
              LESSTHN
              |
              LESSEQ
              |
              MORETHN
              |
              MOREEQ
              |
              EQ
              |
              NOTEQ
              |
              DCOL;

/*done*/
key_vals ::= expression COLON expression
             |
             key_val COMMA expression COLON expression;

/*done*/
seq_vals ::= expression
             |
             seq_vals COMMA expression;

/*done*/
numeric ::= INT
            |
            FLOAT
            |
            RAT
            |
            SUB numeric;

/*done*/
dot_ident ::= IDENT
              |
              dot_ident DOT IDENT;

/*done*/
null_expression ::= expr
                    |
                    ;

/*done*/
expression ::= dot_ident
               |
               numeric
               |
               CHAR
               |
               STRING
               |
               BOOL
               |
               dot_ident DOT LEN
               |
               expression operator expression
               |
               NOT expression
               |
               LPAREN expression RPAREN
               |
               EVAL expression EVAL function_call
               |
               function_call
               |
               LSQUARE seq_vals RSQUARE
               |
               LSQUARE RSQUARE
               |
               dot_ident LSQUARE expression RSQUARE
               |
               dot_ident LSQUARE null_expression COLON null_expression RSQUARE
               |
               IDENTIFIER IN dot_ident
               |
               INTEGER IN dot_ident
               |
               LCURLY key_vals RCURLY
               |
               LCURLY RCURLY;

/*done*/
body ::= body statement
         |
         statement;

/*done*/
statement ::= nullable_expression SEMICOL
              |
              assign
              |
              dot_ident assign expression SEMICOL
              |
              READ dot_ident SEMICOL
              |
              PRINT expression SEMICOL
              |
              IF LPAREN expression RPAREN THEN body FI
              |
              IF LPAREN expression RPAREN THEN body ELSE body FI
              |
              LOOP body POOL
              |
              RETURN nullable_expression SEMICOL
              |
              ALIAS type type SEMICOL
              |
              BREAK SEMICOL
              |
              BREAK INT SEMICOL
              |
              tdef;

/*done*/
fdef ::= FDEF IDENT LPAR formal_parameter_list RPAR LCURL body RCURL COLON type SEMICOL
         |
         FDEF IDENT LPAR formal_parameter_list RPAR LCURL body RCURL SEMICOL
         |
         FDEF IDENT LPAR RPAR LCURL body RCURL COLON type SEMICOL
         |
         FDEF IDENT LPAR RPAR LCURL body RCURL SEMICOL;

/*done*/
assign ::= IDENT COL type ASSIGN expression SEMICOL
           |
           IDENT COL type SEMICOL
           |
           IDENT LSQR INT RSQR ASSIGN expression SEMICOL
           |
           IDENT LSQR INT COL INT RSQR ASSIGN expression SEMICOL;

/*done*/
tdef ::= TDEF IDENT LCURL formal_parameter_list RCURL SEMICOL;

/*done*/
alias ::= ALIAS type IDENT SEMICOL;

/*done*/
main ::= MAIN LCURL body RCURL SEMICOL;
