import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:
        public boolean syntaxErrors = false;

        private Lexer lexer;

        public Parser(Lexer lex) {
                super(lex);
                lexer = lex;
        }

        public void syntax_error(Symbol current_token) {
                report_error(
                        "Syntax error at line " + (current_token.left+1) + ", column "
                        + current_token.right + " ", null
                );
                syntaxErrors = true;
        }
:};

terminal MAIN, TCHAR, TBOOL, TINT, TRAT, TFLOAT, DICT, SEQ, TDEF, ALIAS, FDEF, IF, THEN, ELSE, FI, LOOP, POOL, BREAK, RETURN, READ, PRINT, LEN, TOP, NOT, AND, OR, IMPLY, ADD, SUB, MULT, DIV, POWER, IN, COL, DCOL, LESSTHN, LESSEQ, MORETHN, MOREEQ, EQ, NOTEQ, ASSIGN, LPAR, RPAR, RCURL, LCURL, LSQR, RSQR, DOT, SEMICOL, EVAL, COMMA, IDENT, CHAR, INT, FLOAT, RAT, BOOL, STRING;

nonterminal grammar, globals, type, formal_parameter_list, dot_ident, nullable_expression, function_call, operator, key_vals, seq_vals, numeric, expression, body, statement, fdef, assign, tdef, alias, main, statements, assignments, breakable_statements, breakable_statement, normal_statement, seq_type;

precedence left OR, AND, IMPLY, NOT;
precedence left EQ, NOTEQ, LESSTHN, LESSEQ, MORETHN, MOREEQ;
precedence left DCOL;
precedence left ADD, SUB;
precedence left DIV, MULT;
precedence left POWER;
precedence left LPAR, RPAR;
precedence left DOT, IN;

/* The grammar */
grammar ::= globals main globals;

globals ::= globals fdef
            |
            globals assign
            |
            globals tdef
            |
            globals alias
            |
            ;

seq_type ::= type
             | 
             TOP;

type ::= TCHAR
         |
         TBOOL
         |
         TINT
         |
         TRAT
         |
         TFLOAT
         |
         IDENT
         |
         DICT LESSTHN seq_type COMMA seq_type MORETHN
         |
         SEQ LESSTHN seq_type MORETHN;

formal_parameter_list ::= IDENT COL type
                          |
                          formal_parameter_list COMMA IDENT COL type;

function_call ::= IDENT LPAR seq_vals RPAR
                  |
                  IDENT LPAR RPAR;

operator ::= AND
             |
             OR
             |
             IMPLY
             |
             ADD
             |
             SUB
             |
             MULT
             |
             DIV
             |
             POWER
             |
             LESSTHN
             |
             LESSEQ
             |
             MORETHN
             |
             MOREEQ
             |
             EQ
             |
             NOTEQ
             |
             IN
             |
             DCOL;

key_vals ::= expression COL expression 
             |
             key_vals COMMA expression COL expression;

seq_vals ::= expression
             |
             seq_vals COMMA expression;

numeric ::= INT
            |
            FLOAT
            |
            RAT
            |
            SUB numeric;

nullable_expression ::= expression
                        |
                        ;

expression ::= dot_ident
               |
               numeric
               |
               BOOL
               |
               CHAR
               |
               STRING
               |
               expression operator expression
               |
               NOT expression
               |
               LPAR nullable_expression RPAR
               |
               EVAL expression EVAL function_call
               |
               function_call
               |
               LSQR seq_vals RSQR
               |
               LSQR RSQR
               |
               LCURL key_vals RCURL
               |
               dot_ident DOT LEN
               |
               expression DOT LEN
               |
               LCURL RCURL;
      
dot_ident ::= IDENT
              |
              dot_ident DOT IDENT
              |
              dot_ident LSQR expression RSQR
              |
              dot_ident LSQR nullable_expression COL nullable_expression RSQR;      

body ::= assignments statements;

assignments ::= assignments assign
                |
                ;
  
statements ::=  statements normal_statement
                |
                normal_statement;

statement ::= expression SEMICOL
              |
              dot_ident ASSIGN seq_vals SEMICOL
              |
              READ dot_ident SEMICOL
              |
              PRINT expression SEMICOL
              |
              LOOP breakable_statements POOL
              |
              RETURN nullable_expression SEMICOL
              |
              alias
              |
              tdef
              |
              fdef;
              
breakable_statements ::= breakable_statements breakable_statement
                         |
                         breakable_statement
                         |
                         BREAK SEMICOL
                         |
                         BREAK INT SEMICOL;
                         
normal_statement ::= IF LPAR expression RPAR THEN statements FI
                     |
                     IF LPAR expression RPAR THEN statements ELSE statements FI
                     |
                     statement;
                         
breakable_statement ::= IF LPAR expression RPAR THEN breakable_statements FI
                        |
                        IF LPAR expression RPAR THEN breakable_statements ELSE breakable_statements FI
                        |
                        statement;

fdef ::= FDEF IDENT LPAR formal_parameter_list RPAR LCURL body RCURL COL type SEMICOL
         |
         FDEF IDENT LPAR formal_parameter_list RPAR LCURL body RCURL SEMICOL
         |
         FDEF IDENT LPAR RPAR LCURL body RCURL SEMICOL
         |
         FDEF IDENT LPAR RPAR LCURL body RCURL COL type SEMICOL
         |
         FDEF IDENT LPAR formal_parameter_list RPAR LCURL RCURL COL type SEMICOL
         |
         FDEF IDENT LPAR formal_parameter_list RPAR LCURL RCURL SEMICOL
         |
         FDEF IDENT LPAR RPAR LCURL RCURL SEMICOL
         |
         FDEF IDENT LPAR RPAR LCURL RCURL COL type SEMICOL;

assign ::= IDENT COL type ASSIGN seq_vals SEMICOL
           |
           IDENT COL type SEMICOL;

tdef ::= TDEF IDENT LCURL formal_parameter_list RCURL SEMICOL;

alias ::= ALIAS type IDENT SEMICOL;

main ::= MAIN LCURL body RCURL SEMICOL;