
/* For function declarations, each formal parameter follows the variable/field declaration syntax, id : type.
The formal parameter list is comma-separated list of parameter declarations. A function’s body consists of local
variable declarations, if any, followed by statements. The return type of the function is returnType and is
omitted when the function does not return a value. In Listing 2, the function’s name is an identifier. */

import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:
        public boolean syntaxErrors = false;

        private Lexer lexer;

        public Parser(Lexer lex) {
                super(lex);
                lexer = lex;
        }

        public void syntax_error(Symbol current_token) {
                report_error(
                        "Syntax error at line " + (current_token.left+1) + ", column "
                        + current_token.right + " ", null
                );
                syntaxErrors = true;
        }
:};

terminal MAIN, TCHAR, TBOOL, TINT, TRAT, TFLOAT, DICT, SEQ, TDEF, ALIAS, FDEF, IF, THEN, ELSE, FI, LOOP, POOL, BREAK, RETURN, READ, PRINT, LEN, TOP, NOT, AND, OR, IMPLY, ADD, SUB, MULT, DIV, POWER, IN, COL, DCOL, LESSTHN, LESSEQ, MORETHN, MOREEQ, EQ, NOTEQ, ASSIGN, LPAR, RPAR, RCURL, LCURL, LSQR, RSQR, DOT, SEMICOL, EVAL, COMMA, IDENT, CHAR, INT, FLOAT, RAT, BOOL, STRING;

nonterminal grammar, globals, type, formal_parameter_list, dot_ident, index_ident, nullable_expression, function_call, operator, key_vals, seq_vals, numeric, expression, body, statement, fdef, assign, tdef, alias, main, statements, assignments;

precedence left OR, AND, IMPLY, NOT;
precedence left EQ, NOTEQ, LESSTHN, LESSEQ, MORETHN, MOREEQ;
precedence left DCOL;
precedence left ADD, SUB;
precedence left DIV, MULT;
precedence left POWER;
precedence left LPAR, RPAR;

/* The grammar */
grammar ::= globals main globals;

globals ::= globals fdef
            |
            globals assign
            |
            globals tdef
            |
            globals alias
            |
            ;

type ::= TCHAR
         |
         TBOOL
         |
         TINT
         |
         TRAT
         |
         TFLOAT
         |
         IDENT
         |
         DICT LESSTHN type COMMA type MORETHN
         |
         DICT LESSTHN type COMMA TOP MORETHN
         |
         DICT LESSTHN TOP COMMA type MORETHN
         |
         DICT LESSTHN TOP COMMA TOP MORETHN
         |
         SEQ LESSTHN type MORETHN
         |
         SEQ LESSTHN TOP MORETHN;

formal_parameter_list ::= IDENT COL type
                          |
                          formal_parameter_list COMMA IDENT COL type;

function_call ::= IDENT LPAR seq_vals RPAR
                  |
                  IDENT LPAR RPAR;

operator ::= AND
             |
             OR
             |
             IMPLY
             |
             ADD
             |
             SUB
             |
             MULT
             |
             DIV
             |
             POWER
             |
             LESSTHN
             |
             LESSEQ
             |
             MORETHN
             |
             MOREEQ
             |
             EQ
             |
             NOTEQ
             |
             DCOL;

key_vals ::= expression COL expression 
             |
             key_vals COMMA expression COL expression;

seq_vals ::= expression
             |
             seq_vals COMMA expression;

numeric ::= INT
            |
            FLOAT
            |
            RAT
            |
            SUB numeric;

dot_ident ::= IDENT
              |
              dot_ident DOT IDENT;

nullable_expression ::= expression
                        |
                        ;

expression ::= dot_ident
               |
               numeric
               |
               BOOL
               |
               CHAR
               |
               STRING
               |
               dot_ident DOT LEN
               |
               expression operator expression
               |
               NOT expression
               |
               LPAR expression RPAR
               |
               EVAL expression EVAL function_call
               |
               function_call
               |
               LSQR seq_vals RSQR
               |
               LSQR RSQR
               |
               index_ident
               |
               IDENT IN dot_ident
               |
               INT IN dot_ident
               |
               LCURL key_vals RCURL
               |
               LCURL RCURL;

index_ident ::= dot_ident LSQR expression RSQR
                 |
                 dot_ident LSQR nullable_expression COL nullable_expression RSQR;              

body ::= assignments statements;

assignments ::= assignments assign
                |
                ;
  
statements ::=  statements statement
                |
                statement;

statement ::= nullable_expression SEMICOL
              |
              dot_ident ASSIGN expression SEMICOL
              |
              index_ident ASSIGN expression SEMICOL
              |
              READ dot_ident SEMICOL
              |
              PRINT expression SEMICOL
              |
              IF LPAR expression RPAR THEN body FI
              |
              IF LPAR expression RPAR THEN body ELSE body FI
              |
              LOOP body POOL
              |
              RETURN nullable_expression SEMICOL
              |
              alias
              |
              BREAK SEMICOL
              |
              BREAK INT SEMICOL
              |
              tdef;

fdef ::= FDEF IDENT LPAR formal_parameter_list RPAR LCURL body RCURL COL type SEMICOL
         |
         FDEF IDENT LPAR formal_parameter_list RPAR LCURL body RCURL SEMICOL
         |
         FDEF IDENT LPAR RPAR LCURL body RCURL SEMICOL
         |
         FDEF IDENT LPAR RPAR LCURL body RCURL COL type SEMICOL;

assign ::= IDENT COL type ASSIGN seq_vals SEMICOL
           |
           IDENT COL type SEMICOL;

tdef ::= TDEF IDENT LCURL formal_parameter_list RCURL SEMICOL;

alias ::= ALIAS type IDENT SEMICOL;

main ::= MAIN LCURL body RCURL SEMICOL;