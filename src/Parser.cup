import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:
        public boolean syntaxErrors = false;

        private Lexer lexer;

        public Parser(Lexer lex) {
                super(lex);
                lexer = lex;
        }

        public void syntax_error(Symbol current_token) {
                report_error(
                        "Syntax error at line " + (current_token.left+1) + ", column "
                        + current_token.right + " ", null
                );
                syntaxErrors = true;
        }
:};

terminal MAIN, TCHAR, TBOOL, TINT, TRAT, TFLOAT, DICT, SEQ, TDEF, ALIAS, FDEF, IF, THEN, ELSE, FI, LOOP, POOL, BREAK, RETURN, READ, PRINT, LEN, TOP, NOT, AND, OR, IMPLY, ADD, SUB, MULT, DIV, POWER, IN, COL, DCOL, LESSTHN, LESSEQ, MORETHN, MOREEQ, EQ, NOTEQ, ASSIGN, LPAR, RPAR, RCURL, LCURL, LSQR, RSQR, DOT, SEMICOL, EVAL, COMMA, IDENT, CHAR, INT, FLOAT, RAT, COLON, BOOL, STRING;

nonterminal grammar, globals, type, formal_parameter_list, function_call, operator, key_val, key_vals, seq_vals, numeric, expression, body, function_body, fdef, assign, tdef, alias, main;

precedence left OR, AND, IMPLY, NOT;
precedence left EQ, NOTEQ, LESSTHN, LESSEQ, MORETHN, MOREEQ;
precedence left DCOL;
precedence left ADD, SUB;
precedence left DIV, MULT;
precedence left POWER;
precedence left LPAR, RPAR;

grammar ::= globals main globals;

globals ::= globals fdef
            |
            globals assign
            |
            globals tdef
            |
            globals alias
            |
            ;

type ::= TCHAR
         |
         TBOOL
         |
         TINT
         |
         TRAT
         |
         TFLOAT
         |
         IDENT
         |
         DICT LESSTHN type COMMA type MORETHN
         |
         DICT LESSTHN type COMMA TOP MORETHN
         |
         DICT LESSTHN TOP COMMA type MORETHN
         |
         DICT LESSTHN TOP COMMA TOP MORETHN
         |
         SEQ LESSTHN type MORETHN
         |
         SEQ LESSTHN TOP MORETHN
         |
         ;

formal_parameter_list ::= IDENT COLON type
                          |
                          formal_parameter_list COMMA formal_parameter_list
                          |
                          ;  

function_call ::= IDENT LPAR formal_parameter_list RPAR SEMICOL;
 
operator ::=  AND
              |
              OR
              |
              IMPLY
              |
              ADD
              |
              SUB
              |
              MULT
              |
              DIV
              |
              POWER
              |
              LESSTHN
              |
              LESSEQ
              |
              MORETHN
              |
              MOREEQ
              |
              EQ
              |
              NOTEQ
              |
              DCOL
              |
              ;

key_val ::= expression COLON expression;

key_vals ::= key_val
             |
             key_val COMMA key_val
             |
             ;

seq_vals ::= expression
             |
             seq_vals COMMA seq_vals
             |
             ;

numeric ::= INT
            |
            FLOAT
            |
            RAT
            |
            SUB numeric
            |
            ;

expression ::= numeric
               |
               BOOL
               |
               CHAR
               |
               STRING
               |
               IDENT
               |
               expression operator expression
               |
               NOT expression
               |
               LCURL key_vals RCURL
               |
               LSQR seq_vals RSQR
               |
               function_call
               |
               BREAK
               |
               expression IN LSQR key_vals RSQR
               |
               expression IN LCURL seq_vals RCURL
               |
               expression IN IDENT
               |
               IDENT DOT LEN
  	       |
               ;


body ::= assign
         |
         READ IDENT SEMICOL
         |
         PRINT expression SEMICOL
         |
         function_call
         |
         EVAL expression EVAL function_call
         |
         IF LPAR expression RPAR THEN body FI
         |
         IF LPAR expression RPAR THEN body ELSE body FI
         |
         LOOP body POOL
         |
         ;

function_body ::= body RETURN expression SEMICOL;

fdef ::= FDEF IDENT LPAR formal_parameter_list RPAR LCURL function_body RCURL COL type SEMICOL
         |
         FDEF IDENT LPAR formal_parameter_list RPAR LCURL function_body RCURL SEMICOL
         |
         ;

assign ::= IDENT COL type ASSIGN expression SEMICOL
           |
           IDENT COL type SEMICOL
           |
           IDENT LSQR expression RSQR ASSIGN expression SEMICOL
           |
           IDENT LSQR expression COL expression RSQR ASSIGN expression SEMICOL
           |
           ;

tdef ::= TDEF IDENT LCURL formal_parameter_list RCURL SEMICOL;

alias ::= ALIAS type IDENT SEMICOL
          |
          ALIAS IDENT IDENT SEMICOL
          |
          ;

main ::= MAIN LCURL body RCURL SEMICOL;